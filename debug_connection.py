import os
from dotenv import load_dotenv
import sqlalchemy
from pathlib import Path


def test_env_loading():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î .env"""
    print("üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î .env file...")

    # ‡∏´‡∏≤ .env file
    env_path = Path(".env")
    if not env_path.exists():
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà {env_path.absolute()}")
        return False

    print(f"‚úÖ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env ‡∏ó‡∏µ‡πà {env_path.absolute()}")

    # ‡πÇ‡∏´‡∏•‡∏î .env
    load_dotenv()

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤
    db_config = {
        "DB_HOST": os.getenv("DB_HOST"),
        "DB_PORT": os.getenv("DB_PORT"),
        "DB_USER": os.getenv("DB_USER"),
        "DB_NAME": os.getenv("DB_NAME"),
        "DB_TYPE": os.getenv("DB_TYPE"),
    }

    print("üìã ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å .env:")
    for key, value in db_config.items():
        print(f"   {key}: {value}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡πÑ‡∏´‡∏°
    missing = [k for k, v in db_config.items() if not v]
    if missing:
        print(f"‚ùå ‡∏Ç‡∏≤‡∏î‡∏Ñ‡πà‡∏≤: {missing}")
        return False

    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î .env ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    return True


def test_direct_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á"""
    print("\nüöÄ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á...")

    # ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å .env
    load_dotenv()
    host = os.getenv("DB_HOST", "aws-0-ap-southeast-1.pooler.supabase.com")
    port = os.getenv("DB_PORT", "6543")
    user = os.getenv("DB_USER", "postgres.ydmmxivfmfgbbphmitgy")
    password = os.getenv("DB_PASSWORD", "jsCvOpw2RbFdpf5L")
    database = os.getenv("DB_NAME", "postgres")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection URL
    url = f"postgresql://{user}:{password}@{host}:{port}/{database}?sslmode=require"
    print(f"üîó Connection URL: postgresql://{user}:***@{host}:{port}/{database}")

    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö connection
        engine = sqlalchemy.create_engine(url, connect_args={"connect_timeout": 10})

        with engine.connect() as conn:
            result = conn.execute(sqlalchemy.text("SELECT 1 as test"))
            test_result = result.fetchone()[0]
            print(f"‚úÖ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {test_result}")

            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö version
            result = conn.execute(sqlalchemy.text("SELECT version()"))
            version = result.fetchone()[0]
            print(f"üìã PostgreSQL version: {version[:50]}...")

        return True

    except Exception as e:
        print(f"‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False


def test_project_settings():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö project settings"""
    print("\n‚öôÔ∏è ‡∏ó‡∏î‡∏™‡∏≠‡∏ö project settings...")

    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö import settings
        from src.config.settings import settings

        print("‚úÖ Import settings ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ settings
        print("üìã Settings ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡∏°‡∏≤:")
        print(f"   DB_HOST: {settings.DB_HOST}")
        print(f"   DB_PORT: {settings.DB_PORT}")
        print(f"   DB_USER: {settings.DB_USER}")
        print(f"   DB_NAME: {settings.DB_NAME}")
        print(f"   DB_TYPE: {settings.DB_TYPE}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Supabase values
        if settings.DB_HOST == "localhost":
            print("‚ùå ‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô localhost - settings ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î .env")
            return False

        if "supabase.com" in settings.DB_HOST:
            print("‚úÖ Settings ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Supabase")
            return True
        else:
            print("‚ö†Ô∏è Settings ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Supabase")
            return False

    except Exception as e:
        print(f"‚ùå Import settings ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return False


def main():
    print("üîß Debug Supabase Connection")
    print("=" * 40)

    # Step 1: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö .env
    if not test_env_loading():
        print("\nüí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå .env ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô root directory")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô .env ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        return

    # Step 2: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö direct connection
    if not test_direct_connection():
        print("\nüí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network connection")
        print("2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Supabase credentials")
        print("3. pip install psycopg2-binary")
        return

    # Step 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö project settings
    if not test_project_settings():
        print("\nüí° ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
        print("1. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà src/config/settings.py ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà")
        print("2. ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà src/config/database.py ‡∏î‡πâ‡∏ß‡∏¢‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà")
        return

    print("\nüéâ ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô!")
    print("üöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")


if __name__ == "__main__":
    main()
